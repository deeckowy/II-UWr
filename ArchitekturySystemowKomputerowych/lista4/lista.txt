/////1

1.%rax = 0x100

2.0x110 = 0x13 = 19

3.$0x108 = 264

4.Mem(%rax) = 255

5.8(%rax) = (0x100+0x8) = Mem(0x108)

6.21(%rax,%rdx) = (0x100 + 0x3 + 0x15) = Mem(0x118) = 0x11

7.0xFC(,%rcx,4) = (0x1*4 + 0xFC) = Mem(0x100)

8.(%rax,%rdx,8) = (0x100 + 0x3*8) = (0x100 + 0x18) = Mem(0x118)

9.265(%rcx,%rdx,2) = (0x1 + 0x3*2 + 0x109) = Mem(0x110) 


/////2

1.addq %rcx,(%rax) = 0x1 + 0xFF = 0x100

2.subq 16(%rax),%rdx = 0x3 - (0x100 + 0x10) = 0x3 - 0x13 = 0xFFFFFFF0

3.shrq $4,%rax = 0x100>>4 = 0x10 

4.incq 16(%rax) = (0x100 + 0x10)+0x1 = (0x110)+0x1 = 0x13 + 0x1 = 0x14

5.decq %rcx = 0x1 - 0x1 = 0x0 

6.imulq 8(%rax) = (0x100 + 8) * 0x100 = 0xAB * 0x100 = 0xAB00 (%rax)

7.leaq 7(%rcx,%rcx,8),%rdx = (0x1 + 0x8 * 0x1 + 0x7) = Adr(Mem(0x10)) -> %rdx

8.leaq 0xA(,%rdx,4),%rdx = (0x0 + 0x4 * 0x3 + 0xA) = Adr(Mem(0x16)) -> %rdx


//////3

 %rdi = x , %rsi = y 

cmp = a - b

▪CF setif carry/borrow out from most significant bit(used for unsigned comparisons)
▪ZF setif a == b
▪SF setif (a-b) < 0(as signed)
▪OF setif two’s-complement (signed) overflow(a>0 && b<0 && (a-b)<0) || (a<0 && b>0 && (a-b)>0)


1. x>=y

jae/jnb - ~CF

2. x<y

jl/jnge - SF^OF

3. x wyzszy od y 

ja/jnbe - ~CF&~ZF



//////4 

%edi = 0x4A 3B 2C 1D

ROR %edi, 8         %edi = 0x1D 4A 3B 2C
ROL %di, 8          %edi = 0x1D 4A 2C 3B
ROL %edi, 16         %edi = 0x2C 3B 1D 4A
ROL %di, 8          %edi = 0x2C 3B 4A 1D
ROR %edi, 8         %edi = 0x1D 2C 3D 4A
MOVQ %edi,%eax      %eax = 0x1D 2C 3D 4A

///funkcja w lista.c


////7

ADD %rdi,%rsi <- jesli wystapi overflow to CF == 1
CMOVNC %rsi,%rax
CMOVC $0xFFFFFFFF,%rax

